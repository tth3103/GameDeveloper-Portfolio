{"ast":null,"code":"import React,{useState}from\"react\";import{styled}from\"styled-components\";import{MediaType}from\"../types\";import{Row}from\"../Styles/StyledComponents\";import{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";const MediaWrapper=styled(Row)`\njustify-content: center;\n  width: 100%;\n  height: 100%;\n  cursor: pointer;\n`;const MediaIframe=styled.iframe`\n  width: 70%;\n  height: 100%;\n  border: none;\n\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n`;const MediaImage=styled.img`\n  width: 100%;\n  height: auto;\n  max-height: 300px;\n  object-fit: contain;\n  cursor: pointer;\n`;const PopupOverlay=styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.8);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n`;const PopupImage=styled.img`\n  max-width: 70%;\n  max-height: 70%;\n\n  @media (max-width: 768px) {\n    max-width: 90%;\n    max-height: 90%;\n  }\n`;const BigMedia=_ref=>{let{source,type}=_ref;const[isPopupOpen,setIsPopupOpen]=useState(false);const handleClick=()=>{if(type===MediaType.Image){setIsPopupOpen(true);}};const getYouTubeEmbedUrl=url=>{return`${url}?autoplay=1&mute=1`;};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(MediaWrapper,{onClick:handleClick,children:type===MediaType.YouTube?/*#__PURE__*/_jsx(MediaIframe,{src:getYouTubeEmbedUrl(source),allow:\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\",allowFullScreen:true}):/*#__PURE__*/_jsx(MediaImage,{src:`${process.env.PUBLIC_URL}${source}`,alt:\"Game Media\"})}),isPopupOpen&&/*#__PURE__*/_jsx(PopupOverlay,{onClick:()=>setIsPopupOpen(false),children:/*#__PURE__*/_jsx(PopupImage,{src:`${process.env.PUBLIC_URL}${source}`,alt:\"Enlarged Media\"})})]});};export default BigMedia;","map":{"version":3,"names":["React","useState","styled","MediaType","Row","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","MediaWrapper","MediaIframe","iframe","MediaImage","img","PopupOverlay","div","PopupImage","BigMedia","_ref","source","type","isPopupOpen","setIsPopupOpen","handleClick","Image","getYouTubeEmbedUrl","url","children","onClick","YouTube","src","allow","allowFullScreen","process","env","PUBLIC_URL","alt"],"sources":["C:/Users/PC/Downloads/portfolio/GameDeveloper-Portfolio/src/Components/BigMedia.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { styled } from \"styled-components\";\r\nimport { MediaItem, MediaType } from \"../types\";\r\nimport { Row } from \"../Styles/StyledComponents\";\r\n\r\nconst MediaWrapper = styled(Row)`\r\njustify-content: center;\r\n  width: 100%;\r\n  height: 100%;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst MediaIframe = styled.iframe`\r\n  width: 70%;\r\n  height: 100%;\r\n  border: none;\r\n\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nconst MediaImage = styled.img`\r\n  width: 100%;\r\n  height: auto;\r\n  max-height: 300px;\r\n  object-fit: contain;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst PopupOverlay = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: rgba(0, 0, 0, 0.8);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: 1000;\r\n`;\r\n\r\nconst PopupImage = styled.img`\r\n  max-width: 70%;\r\n  max-height: 70%;\r\n\r\n  @media (max-width: 768px) {\r\n    max-width: 90%;\r\n    max-height: 90%;\r\n  }\r\n`;\r\n\r\nconst BigMedia: React.FC<MediaItem> = ({ source, type }) => {\r\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\r\n\r\n  const handleClick = () => {\r\n    if (type === MediaType.Image) {\r\n      setIsPopupOpen(true);\r\n    }\r\n  };\r\n\r\n  const getYouTubeEmbedUrl = (url: string) => {\r\n    return`${url}?autoplay=1&mute=1`;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <MediaWrapper onClick={handleClick}>\r\n        {type === MediaType.YouTube ? (\r\n          <MediaIframe\r\n            src={getYouTubeEmbedUrl(source)}\r\n            allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\r\n            allowFullScreen\r\n          />\r\n        ) : (\r\n          <MediaImage src={`${process.env.PUBLIC_URL}${source}`} alt=\"Game Media\" />\r\n        )}\r\n      </MediaWrapper>\r\n\r\n      {isPopupOpen && (\r\n        <PopupOverlay onClick={() => setIsPopupOpen(false)}>\r\n          <PopupImage src={`${process.env.PUBLIC_URL}${source}`} alt=\"Enlarged Media\" />\r\n        </PopupOverlay>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BigMedia;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,OAASC,MAAM,KAAQ,mBAAmB,CAC1C,OAAoBC,SAAS,KAAQ,UAAU,CAC/C,OAASC,GAAG,KAAQ,4BAA4B,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,QAAA,IAAAC,SAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEjD,KAAM,CAAAC,YAAY,CAAGT,MAAM,CAACE,GAAG,CAAC;AAChC;AACA;AACA;AACA;AACA,CAAC,CAED,KAAM,CAAAQ,WAAW,CAAGV,MAAM,CAACW,MAAM;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAED,KAAM,CAAAC,UAAU,CAAGZ,MAAM,CAACa,GAAG;AAC7B;AACA;AACA;AACA;AACA;AACA,CAAC,CAED,KAAM,CAAAC,YAAY,CAAGd,MAAM,CAACe,GAAG;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAED,KAAM,CAAAC,UAAU,CAAGhB,MAAM,CAACa,GAAG;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAED,KAAM,CAAAI,QAA6B,CAAGC,IAAA,EAAsB,IAArB,CAAEC,MAAM,CAAEC,IAAK,CAAC,CAAAF,IAAA,CACrD,KAAM,CAACG,WAAW,CAAEC,cAAc,CAAC,CAAGvB,QAAQ,CAAC,KAAK,CAAC,CAErD,KAAM,CAAAwB,WAAW,CAAGA,CAAA,GAAM,CACxB,GAAIH,IAAI,GAAKnB,SAAS,CAACuB,KAAK,CAAE,CAC5BF,cAAc,CAAC,IAAI,CAAC,CACtB,CACF,CAAC,CAED,KAAM,CAAAG,kBAAkB,CAAIC,GAAW,EAAK,CAC1C,MAAM,GAAGA,GAAG,oBAAoB,CAClC,CAAC,CAED,mBACElB,KAAA,CAAAF,SAAA,EAAAqB,QAAA,eACEvB,IAAA,CAACK,YAAY,EAACmB,OAAO,CAAEL,WAAY,CAAAI,QAAA,CAChCP,IAAI,GAAKnB,SAAS,CAAC4B,OAAO,cACzBzB,IAAA,CAACM,WAAW,EACVoB,GAAG,CAAEL,kBAAkB,CAACN,MAAM,CAAE,CAChCY,KAAK,CAAC,yEAAyE,CAC/EC,eAAe,MAChB,CAAC,cAEF5B,IAAA,CAACQ,UAAU,EAACkB,GAAG,CAAE,GAAGG,OAAO,CAACC,GAAG,CAACC,UAAU,GAAGhB,MAAM,EAAG,CAACiB,GAAG,CAAC,YAAY,CAAE,CAC1E,CACW,CAAC,CAEdf,WAAW,eACVjB,IAAA,CAACU,YAAY,EAACc,OAAO,CAAEA,CAAA,GAAMN,cAAc,CAAC,KAAK,CAAE,CAAAK,QAAA,cACjDvB,IAAA,CAACY,UAAU,EAACc,GAAG,CAAE,GAAGG,OAAO,CAACC,GAAG,CAACC,UAAU,GAAGhB,MAAM,EAAG,CAACiB,GAAG,CAAC,gBAAgB,CAAE,CAAC,CAClE,CACf,EACD,CAAC,CAEP,CAAC,CAED,cAAe,CAAAnB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}